generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ActorEvent {
  id             Int      @id @default(autoincrement())
  actorId        Int?     @map("actor_id")
  sessionId      Int?     @map("session_id")
  key            String
  value          String?
  ip             String?
  browser        String?
  device         String?
  vendor         String?
  engine         String?
  os             String?
  osVersion      String?  @map("os_version")
  engineVersion  String?  @map("engine_version")
  browserVersion String?  @map("browser_version")
  reqUrl         String?  @map("req_url")
  userAgent      String?  @map("user_agent")
  meta           String?
  createdAt      DateTime @default(now()) @map("created_at")

  actor   Actor?   @relation(fields: [actorId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])

  @@index([actorId], name: "actor_events_actor_id_index")
  @@index([browser], name: "actor_events_browser_index")
  @@index([device], name: "actor_events_device_index")
  @@index([engine], name: "actor_events_engine_index")
  @@index([ip], name: "actor_events_ip_index")
  @@index([key], name: "actor_events_key_index")
  @@index([os], name: "actor_events_os_index")
  @@index([sessionId], name: "actor_events_session_id_index")
  @@index([value], name: "actor_events_value_index")
  @@index([vendor], name: "actor_events_vendor_index")
  @@map("actor_events")
}

model Actor {
  id          Int       @id @default(autoincrement())
  displayName String?   @map("display_name")
  avatarName  String?   @map("avatar_name")
  admin       Boolean?  @default(false)
  verifiedAt  DateTime? @map("verified_at")
  kind        String?
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  events                ActorEvent[]
  sessions              Session[]
  widgets               Widget[]
  participants          Participant[]
  analyticsCameraUsage  AnalyticsCameraUsage[]
  analyticsMicUsage     AnalyticsMicUsage[]
  analyticsRoomUsage    AnalyticsRoomUsage[]
  errors                Error[]
  experienceRatings     ExperienceRating[]
  magicCodes            MagicCode[]
  messages              Message[]
  roomMemberships       RoomMembership[]
  roomParticipantStates ParticipantTransform[]
  roomTemplates         RoomTemplate[]
  createdRooms          Room[]
  slackActions          SlackAction[]
  slackInstalls         SlackInstall[]
  wallpapers            Wallpaper[]
  participantState      ParticipantState?
  surveyResponses       SurveyResponse[]

  @@index([deletedAt], name: "actors_deleted_at_index")
  @@index([kind], name: "actors_kind_index")
  @@map("actors")
}

model AnalyticsCameraUsage {
  id              Int      @id @default(autoincrement())
  roomid          Int      @map("room_id")
  actorId         Int?     @map("actor_id")
  participantId   Int?     @map("participant_id")
  isToggledOn     Boolean  @map("is_toggled_on")
  toggledAt       DateTime @map("toggled_at")
  lastHeartbeatAt DateTime @map("last_heartbeat_at")
  createdAt       DateTime @default(now()) @map("created_at")

  room        Room         @relation(fields: [roomid], references: [id])
  actor       Actor?       @relation(fields: [actorId], references: [id])
  participant Participant? @relation(fields: [participantId], references: [id])

  @@index([actorId, participantId], name: "analytics_camera_usage_actor_id_participant_id_index")
  @@index([isToggledOn], name: "analytics_camera_usage_is_toggled_on_index")
  @@index([roomid], name: "analytics_camera_usage_room_id_index")
  @@index([toggledAt], name: "analytics_camera_usage_toggled_at_index")
  @@map("analytics_camera_usage")
}

model AnalyticsMicUsage {
  id              Int      @id @default(autoincrement())
  roomId          Int      @map("room_id")
  actorId         Int?     @map("actor_id")
  participantId   Int?     @map("participant_id")
  isToggledOn     Boolean  @map("is_toggled_on")
  toggledAt       DateTime @map("toggled_at")
  lastHeartbeatAt DateTime @map("last_heartbeat_at")
  createdAt       DateTime @default(now()) @map("created_at")

  room        Room         @relation(fields: [roomId], references: [id])
  actor       Actor?       @relation(fields: [actorId], references: [id])
  participant Participant? @relation(fields: [participantId], references: [id])

  @@index([actorId, participantId], name: "analytics_mic_usage_actor_id_participant_id_index")
  @@index([isToggledOn], name: "analytics_mic_usage_is_toggled_on_index")
  @@index([roomId], name: "analytics_mic_usage_room_id_index")
  @@index([toggledAt], name: "analytics_mic_usage_toggled_at_index")
  @@map("analytics_mic_usage")
}

model AnalyticsRoomParticipantCount {
  id               Int      @id @default(autoincrement())
  roomId           Int      @map("room_id")
  participantCount Int      @map("participant_count")
  measuredAt       DateTime @map("measured_at")
  createdAt        DateTime @default(now()) @map("created_at")

  room Room @relation(fields: [roomId], references: [id])

  @@index([measuredAt], name: "analytics_room_participant_count_measured_at_index")
  @@index([participantCount], name: "analytics_room_participant_count_participant_count_index")
  @@index([roomId], name: "analytics_room_participant_count_room_id_index")
  @@map("analytics_room_participant_count")
}

model AnalyticsRoomUsage {
  id              Int      @id @default(autoincrement())
  roomId          Int      @map("room_id")
  actorId         Int?     @map("actor_id")
  participantId   Int?     @map("participant_id")
  beganAt         DateTime @map("began_at")
  lastHeartbeatAt DateTime @map("last_heartbeat_at")
  createdAt       DateTime @default(now()) @map("created_at")

  room        Room         @relation(fields: [roomId], references: [id])
  actor       Actor?       @relation(fields: [actorId], references: [id])
  participant Participant? @relation(fields: [participantId], references: [id])

  @@index([actorId, participantId], name: "analytics_room_usage_actor_id_participant_id_index")
  @@index([beganAt, lastHeartbeatAt], name: "analytics_room_usage_began_at_last_heartbeat_at_index")
  @@index([roomId], name: "analytics_room_usage_room_id_index")
  @@map("analytics_room_usage")
}

model AnalyticsTotalParticipantCount {
  id         Int      @id @default(autoincrement())
  count      Int
  measuredAt DateTime @map("measured_at")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([count], name: "analytics_total_participant_counts_count_index")
  @@index([measuredAt], name: "analytics_total_participant_counts_measured_at_index")
  @@map("analytics_total_participant_counts")
}

model Error {
  id         Int      @id @default(autoincrement())
  actorId    Int?     @map("actor_id")
  httpCode   Int?     @map("http_code")
  noodleCode String?  @map("noodle_code")
  stack      String?
  message    String?
  tag        String?
  createdAt  DateTime @default(now()) @map("created_at")

  actor Actor? @relation(fields: [actorId], references: [id])

  @@index([actorId], name: "errors_actor_id_index")
  @@index([httpCode], name: "errors_http_code_index")
  @@index([noodleCode], name: "errors_noodle_code_index")
  @@index([tag], name: "errors_tag_index")
  @@map("errors")
}

model ExperienceRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  submittedAt DateTime @map("submitted_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  rating      Int
  feedback    String?
  actorId     Int?     @map("actor_id")
  roomId      Int?     @map("room_id")
  sessionId   Int?     @map("session_id")

  actor   Actor?   @relation(fields: [actorId], references: [id])
  room    Room?    @relation(fields: [roomId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])

  @@index([actorId], name: "experience_ratings_actor_id_index")
  @@index([rating], name: "experience_ratings_rating_index")
  @@index([roomId], name: "experience_ratings_room_id_index")
  @@index([sessionId], name: "experience_ratings_session_id_index")
  @@map("experience_ratings")
}

model MagicCode {
  id         Int       @id @default(autoincrement())
  actorId    Int       @map("actor_id")
  code       String    @unique
  action     String
  meta       String?
  issuedAt   DateTime  @map("issued_at")
  expiresAt  DateTime? @map("expires_at")
  resolvedAt DateTime? @map("resolved_at")
  revokedAt  DateTime? @map("revoked_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")

  actor Actor @relation(fields: [actorId], references: [id])

  @@index([action], name: "magic_codes_action_index")
  @@index([actorId], name: "magic_codes_actor_id_index")
  @@index([code], name: "magic_codes_code_index")
  @@map("magic_codes")
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int?     @map("chat_id")
  content   String?
  senderId  Int?     @map("sender_id")
  createdAt DateTime @default(now()) @map("created_at")

  chat   Widget? @relation(fields: [chatId], references: [id])
  sender Actor?  @relation(fields: [senderId], references: [id])

  @@index([chatId], name: "messages_chat_id_index")
  @@index([senderId], name: "messages_sender_id_index")
  @@map("messages")
}

model ParticipantState {
  actorId   Int      @id @map("actor_id")
  state     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  actor Actor @relation(fields: [actorId], references: [id])

  @@map("participant_states")
}

model Participant {
  id             Int       @id @default(autoincrement())
  actorId        Int?      @map("actor_id")
  roomId         Int?      @map("room_id")
  ip             String?
  browser        String?
  device         String?
  vendor         String?
  engine         String?
  os             String?
  osVersion      String?   @map("os_version")
  engineVersion  String?   @map("engine_version")
  browserVersion String?   @map("browser_version")
  userAgent      String?   @map("user_agent")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")

  actor                Actor?                 @relation(fields: [actorId], references: [id])
  room                 Room?                  @relation(fields: [roomId], references: [id])
  analyticsRoomUsage   AnalyticsRoomUsage[]
  analyticsMicUsage    AnalyticsMicUsage[]
  analyticsCameraUsage AnalyticsCameraUsage[]

  @@index([actorId], name: "participants_actor_id_index")
  @@index([browser], name: "participants_browser_index")
  @@index([device], name: "participants_device_index")
  @@index([engine], name: "participants_engine_index")
  @@index([ip], name: "participants_ip_index")
  @@index([os], name: "participants_os_index")
  @@index([roomId], name: "participants_room_id_index")
  @@index([vendor], name: "participants_vendor_index")
  @@map("participants")
}

model RoomMembership {
  id        Int       @id @default(autoincrement())
  roomId    Int       @map("room_id")
  actorId   Int       @map("actor_id")
  beganAt   DateTime? @map("began_at")
  expiresAt DateTime? @map("expires_at")
  revokedAt DateTime? @map("revoked_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")

  actor Actor @relation(fields: [actorId], references: [id])
  room  Room  @relation(fields: [roomId], references: [id])

  @@index([actorId], name: "room_memberships_actor_id_index")
  @@index([roomId], name: "room_memberships_room_id_index")
  @@map("room_memberships")
}

model ParticipantTransform {
  roomId    Int      @map("room_id")
  actorId   Int      @map("actor_id")
  state     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  room  Room  @relation(fields: [roomId], references: [id])
  actor Actor @relation(fields: [actorId], references: [id])

  @@id([roomId, actorId])
  @@map("room_participant_states")
}

model RoomRoute {
  id            Int      @id @default(autoincrement())
  roomId        Int      @map("room_id")
  route         String   @unique
  priorityLevel Int      @default(0) @map("priority_level")
  isVanity      Boolean? @map("is_vanity")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  room Room @relation(fields: [roomId], references: [id])

  @@index([roomId, priorityLevel], name: "room_routes_room_id_priority_level_index")
  @@index([route], name: "room_routes_route_index")
  @@map("room_routes")
}

model RoomState {
  roomId      Int      @id @map("room_id")
  state       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  wallpaperId Int?     @map("wallpaper_id")

  room      Room       @relation(fields: [roomId], references: [id])
  wallpaper Wallpaper? @relation(fields: [wallpaperId], references: [id])

  @@map("room_states")
}

model RoomTemplate {
  id        Int      @id @default(autoincrement())
  creatorId Int?     @map("creator_id")
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  data      String?

  creator Actor? @relation(fields: [creatorId], references: [id])

  @@index([creatorId], name: "room_templates_creator_id_index")
  @@index([name], name: "room_templates_name_index")
  @@map("room_templates")
}

model WidgetTransform {
  roomId    Int      @map("room_id")
  widgetId  Int      @unique @map("widget_id")
  state     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  room   Room   @relation(fields: [roomId], references: [id])
  widget Widget @relation(fields: [widgetId], references: [id])

  @@id([roomId, widgetId])
  @@map("room_widget_states")
}

model RoomWidget {
  widgetId  Int      @unique @map("widget_id")
  roomId    Int      @map("room_id")
  createdAt DateTime @default(now()) @map("created_at")

  widget Widget? @relation(fields: [widgetId], references: [id])
  room   Room?   @relation(fields: [roomId], references: [id])

  @@id([widgetId, roomId])
  @@index([roomId], name: "room_widgets_room_id_index")
  @@index([widgetId], name: "room_widgets_widget_id_index")
  @@map("room_widgets")
}

model Room {
  id           Int       @id @default(autoincrement())
  creatorId    Int?      @map("creator_id")
  urlId        String?   @unique @map("url_id")
  isPublic     Boolean?  @default(true) @map("is_public")
  displayName  String?   @map("display_name")
  templateName String?   @map("template_name")
  deletedAt    DateTime? @map("deleted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")

  creator                       Actor?                          @relation(fields: [creatorId], references: [id])
  widgets                       RoomWidget[]
  analyticsCameraUsage          AnalyticsCameraUsage[]
  analyticsMicUsage             AnalyticsMicUsage[]
  analyticsRoomParticipantCount AnalyticsRoomParticipantCount[]
  analyticsRoomUsage            AnalyticsRoomUsage[]
  experienceRatings             ExperienceRating[]
  participants                  Participant[]
  memberships                   RoomMembership[]
  participantStates             ParticipantTransform[]
  routes                        RoomRoute[]
  state                         RoomState?
  widgetStates                  WidgetTransform[]

  @@index([creatorId], name: "rooms_creator_id_index")
  @@index([deletedAt], name: "rooms_deleted_at_index")
  @@index([templateName], name: "rooms_template_name_index")
  @@index([urlId], name: "rooms_url_id_index")
  @@map("rooms")
}

model Session {
  id        Int       @id @default(autoincrement())
  actorId   Int       @map("actor_id")
  secret    String?
  expiresAt DateTime? @map("expires_at")
  revokedAt DateTime? @map("revoked_at")
  createdAt DateTime  @default(now()) @map("created_at")

  actor             Actor?             @relation(fields: [actorId], references: [id])
  experienceRatings ExperienceRating[]
  actorEvents       ActorEvent[]

  @@index([actorId], name: "sessions_actor_id_index")
  @@index([expiresAt], name: "sessions_expires_at_index")
  @@index([revokedAt], name: "sessions_revoked_at_index")
  @@index([secret], name: "sessions_secret_index")
  @@map("sessions")
}

model SlackAction {
  id          Int      @id @default(autoincrement())
  actorId     Int?     @map("actor_id")
  action      String?
  slackUserId String?  @map("slack_user_id")
  channelId   String?  @map("channel_id")
  createdAt   DateTime @default(now()) @map("created_at")

  actor Actor? @relation(fields: [actorId], references: [id])

  @@index([actorId], name: "slack_actions_actor_id_index")
  @@map("slack_actions")
}

model SlackInstall {
  id            Int       @id @default(autoincrement())
  actorId       Int?      @map("actor_id")
  workspaceId   String?   @map("workspace_id")
  enterpriseId  String?   @map("enterprise_id")
  slackUserId   String?   @map("slack_user_id")
  installData   String?   @map("install_data")
  createdAt     DateTime  @default(now()) @map("created_at")
  uninstalledAt DateTime? @map("uninstalled_at")

  actor Actor? @relation(fields: [actorId], references: [id])

  @@index([actorId], name: "slack_installs_actor_id_index")
  @@index([enterpriseId], name: "slack_installs_enterprise_id_index")
  @@index([workspaceId], name: "slack_installs_workspace_id_index")
  @@map("slack_installs")
}

model Wallpaper {
  id            Int      @id @default(autoincrement())
  creatorId     Int?     @map("creator_id")
  name          String?
  url           String   @unique
  mimetype      String?
  category      String?
  artistName    String?  @map("artist_name")
  thumbnailUrl  String?  @map("thumbnail_url")
  dominantColor String?  @map("dominant_color")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  creator         Actor?      @relation(fields: [creatorId], references: [id])
  roomStateUsages RoomState[]

  @@index([creatorId], name: "wallpapers_creator_id_index")
  @@index([url], name: "wallpapers_url_index")
  @@map("wallpapers")
}

model WidgetState {
  widgetId  Int      @id @map("widget_id")
  state     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  widget Widget @relation(fields: [widgetId], references: [id])

  @@map("widget_states")
}

model Widget {
  id         Int       @id @default(autoincrement())
  creatorId  Int?      @map("creator_id")
  type       String?   @map("_type")
  deletedAt  DateTime? @map("deleted_at")
  deletedBy  Int?      @map("deleted_by")
  archivedAt DateTime? @map("archived_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")

  creator     Actor?           @relation(fields: [creatorId], references: [id])
  widgetState WidgetState?
  transform   WidgetTransform?
  roomWidget  RoomWidget?
  messages    Message[]

  @@index([type], name: "widgets__type_index")
  @@index([archivedAt], name: "widgets_archived_at_index")
  @@index([creatorId], name: "widgets_creator_id_index")
  @@index([deletedAt], name: "widgets_deleted_at_index")
  @@map("widgets")
}

model SurveyResponse {
  id         String   @id @default(cuid())
  actorId    Int?     @map("actor_id")
  surveyName String?  @map("survey_name")
  response   String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  actor Actor? @relation(fields: [actorId], references: [id])

  @@map("survey_responses")
}

model FileUpload {
  id            String   @id @default(cuid())
  creatorId     Int?     @map("actor_id")
  url           String
  name          String
  mimetype      String
  thumbnailUrl  String?  @map("thumbnail_url")
  dominantColor String?  @map("dominant_color")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("file_uploads")
}
